diff --git a/ckan/lib/navl/dictization_functions.py b/ckan/lib/navl/dictization_functions.py
index 0773743aea..38e1dd28c3 100644
--- a/ckan/lib/navl/dictization_functions.py
+++ b/ckan/lib/navl/dictization_functions.py
@@ -245,6 +245,20 @@ def convert(converter, key, converted_data, errors, context):
         return
 
 
+def _remove_blank_keys(schema):
+
+    schema_copy = copy.copy(schema)
+
+    for key, value in schema.items():
+        if isinstance(value[0], dict):
+            for item in value:
+                _remove_blank_keys(item)
+            if not any(value):
+                schema_copy.pop(key)
+
+    return schema_copy
+
+
 def validate(data, schema, context=None):
     '''Validate an unflattened nested dict against a schema.'''
     context = context or {}
@@ -271,12 +285,21 @@ def validate(data, schema, context=None):
             if key not in converted_data:
                 converted_data[key] = []
 
+    errors_unflattened = unflatten(errors)
+
     # remove validators that passed
-    for key in list(errors.keys()):
-        if not errors[key]:
-            del errors[key]
+    dicts_to_process = [errors_unflattened]
+    while dicts_to_process:
+        dict_to_process = dicts_to_process.pop()
+        dict_to_process_copy = copy.copy(dict_to_process)
+        for key, value in dict_to_process_copy.items():
+            if not value:
+                dict_to_process.pop(key)
+                continue
+            if isinstance(value[0], dict):
+                dicts_to_process.extend(value)
 
-    errors_unflattened = unflatten(errors)
+    errors_unflattened = _remove_blank_keys(errors_unflattened)
 
     return converted_data, errors_unflattened
 
diff --git a/ckan/tests/legacy/lib/test_navl.py b/ckan/tests/legacy/lib/test_navl.py
index 044bec3dd0..7eac824189 100644
--- a/ckan/tests/legacy/lib/test_navl.py
+++ b/ckan/tests/legacy/lib/test_navl.py
@@ -342,7 +342,45 @@ def test_simple():
 
     converted_data, errors = validate(data, schema)
 
-    assert errors == {"numbers": [{"code": [u"Missing value"]}]}
+    assert errors == {"numbers": [{"code": [u"Missing value"]}, {}]}
+
+
+def test_error_list_position():
+    data = {
+        "name": "fred",
+        "cats": [{"name": "rita"}, {"name": "otis"}],
+        "numbers": [
+            {"number": "432423432", "code": "+44"},
+            {"number": "13221312"},
+            {"number": "432423432", "code": "+44"},
+            {"number": "13221312"},
+            {"number": "432423432", "code": "+44"},
+        ],
+    }
+
+    schema = {
+        "name": [not_empty],
+        "cats": {
+            "name": [not_empty],
+        },
+        "numbers": {
+            "number": [convert_int],
+            "code": [not_empty],
+            "__extras": [ignore],
+        },
+    }
+
+    converted_data, errors = validate(data, schema)
+
+    assert errors == {
+            "numbers": [
+                {},
+                {"code": [u"Missing value"]},
+                {},
+                {"code": [u"Missing value"]},
+                {},
+            ]
+    }
 
 
 def test_simple_converter_types():
